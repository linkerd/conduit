name: CI

on:
  pull_request: {}
  push:
    branches:
    - master
    tags:
    - "*"

# Jobs by event type and dependencies:

# Unit tests for every master/tag push and PR
#
# validate_go_deps
# go_unit_tests
# go_lint
# js_unit_tests

# Docker build and integration tests for every master/tag push and linkerd org PR
#
# docker_pull
# docker_build
# kind_setup
#   -> kind_integration
#     -> kind_cleanup

# Docker deploy and cloud integration tests for every master/tag push
#
#       -> docker_deploy
#         -> cloud_integration
#           -> cloud_cleanup

jobs:

  #
  # Docker build and kind integration tests run for:
  # - every master push
  # - every tag push
  # - every PR from a linkerd org member
  #

  docker_pull:
    name: Docker pull
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout code
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      uses: actions/checkout@v2
    - name: Docker SSH setup
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      run: |
        mkdir -p ~/.ssh/
        touch ~/.ssh/id && chmod 600 ~/.ssh/id
        echo "${{ secrets.DOCKER_SSH_CONFIG }}"  > ~/.ssh/config
        echo "${{ secrets.DOCKER_PRIVATE_KEY }}" > ~/.ssh/id
        echo "${{ secrets.DOCKER_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
        ssh linkerd-docker docker version
    - name: Docker pull
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_HOST: ssh://linkerd-docker
      run: |
        bin/docker pull gcr.io/linkerd-io/proxy-init:v1.3.0
        bin/docker pull prom/prometheus:v2.11.1

  docker_build:
    name: Docker build
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout code
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      uses: actions/checkout@v2
    - name: Docker SSH setup
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      run: |
        mkdir -p ~/.ssh/
        touch ~/.ssh/id && chmod 600 ~/.ssh/id
        echo "${{ secrets.DOCKER_SSH_CONFIG }}"  > ~/.ssh/config
        echo "${{ secrets.DOCKER_PRIVATE_KEY }}" > ~/.ssh/id
        echo "${{ secrets.DOCKER_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
        ssh linkerd-docker docker version
    - name: Docker build
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_HOST: ssh://linkerd-docker
      run: |
        export PATH="`pwd`/bin:$PATH"
        DOCKER_TRACE=1 bin/docker-build

  kind_setup:
    strategy:
      max-parallel: 3
      matrix:
        integration_test: [external_issuer]
    name: Cluster setup (${{ matrix.integration_test }})
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout code
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      uses: actions/checkout@v2
    - name: Docker SSH setup
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      run: |
        mkdir -p ~/.ssh/
        touch ~/.ssh/id && chmod 600 ~/.ssh/id
        echo "${{ secrets.DOCKER_SSH_CONFIG }}"  > ~/.ssh/config
        echo "${{ secrets.DOCKER_PRIVATE_KEY }}" > ~/.ssh/id
        echo "${{ secrets.DOCKER_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
        ssh linkerd-docker docker version
    - name: Kind cluster setup
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_HOST: ssh://linkerd-docker
      run: |
        TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        export KIND_CLUSTER=github-$TAG-${{ matrix.integration_test }}
        export KUBECONFIG=/tmp/kind-config-$KIND_CLUSTER 
        export CUSTOM_DOMAIN_CONFIG="test/testdata/custom_cluster_domain_config.yaml"
        # retry cluster creation once in case of port conflict or kubeadm failure
        if [ "${{ matrix.integration_test }}" == "custom_domain" ]
        then
          bin/kind create cluster --name=$KIND_CLUSTER --wait=2m --verbosity 3 --config=$CUSTOM_DOMAIN_CONFIG ||
            bin/kind create cluster --name=$KIND_CLUSTER --wait=2m --verbosity 3 --config=$CUSTOM_DOMAIN_CONFIG
        else
          bin/kind create cluster --name=$KIND_CLUSTER --wait=2m --verbosity 3 ||
            bin/kind create cluster --name=$KIND_CLUSTER --wait=2m --verbosity 3
        fi

  kind_integration:
    strategy:
      max-parallel: 3
      matrix:
        integration_test: [external_issuer]
    needs: [docker_pull, docker_build, kind_setup]
    name: Integration tests (${{ matrix.integration_test }})
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout code
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      uses: actions/checkout@v2
    - name: Docker SSH setup
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      run: |
        mkdir -p ~/.ssh/
        touch ~/.ssh/id && chmod 600 ~/.ssh/id
        echo "${{ secrets.DOCKER_SSH_CONFIG }}"  > ~/.ssh/config
        echo "${{ secrets.DOCKER_PRIVATE_KEY }}" > ~/.ssh/id
        echo "${{ secrets.DOCKER_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
        ssh linkerd-docker docker version
    - name: Kind load docker images
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      run: |
        TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        export KIND_CLUSTER=github-$TAG-${{ matrix.integration_test }}
        ssh -T linkerd-docker > /dev/null << EOF
          # TODO: This is using the kind binary on the remote host.
          # TODO: 'kind' still points to v0.5.1. When there are no more old CI branches depending on that
          # we can replace it with v0.6.1. In the meantime we explicitly use 'kind-0.6.1'
          kind-0.6.1 load docker-image gcr.io/linkerd-io/proxy-init:v1.3.0 --name=$KIND_CLUSTER
          kind-0.6.1 load docker-image prom/prometheus:v2.11.1 --name=$KIND_CLUSTER
          for IMG in controller grafana proxy web ; do
            kind-0.6.1 load docker-image gcr.io/linkerd-io/\$IMG:$TAG --name=$KIND_CLUSTER
          done
        EOF
    - name: Install linkerd CLI
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_HOST: ssh://linkerd-docker
      run: |
        TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        image="gcr.io/linkerd-io/cli-bin:$TAG"
        id=$(bin/docker create $image)
        bin/docker cp "$id:/out/linkerd-linux" "$HOME/.linkerd"
        $HOME/.linkerd version --client
        # validate CLI version matches the repo
        [[ "$TAG" == "$($HOME/.linkerd version --short --client)" ]]
        echo "Installed Linkerd CLI version: $TAG"
    - name: Run integration tests
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_HOST: ssh://linkerd-docker
        GITCOOKIE_SH: ${{ secrets.GITCOOKIE_SH }}
      run: |
        export PATH="`pwd`/bin:$PATH"
        echo "$GITCOOKIE_SH" | bash
        # TODO: pin Go version
        go version
        TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        export KIND_CLUSTER=github-$TAG-${{ matrix.integration_test }}
        # Restore kubeconfig from remote docker host.
        mkdir -p $HOME/.kube
        export KUBECONFIG=$HOME/.kube/kind-config-$KIND_CLUSTER
        bin/kind export kubeconfig --name=$KIND_CLUSTER --kubeconfig $KUBECONFIG
        # Start ssh tunnel to allow kubectl to connect via localhost.
        export KIND_PORT=$(bin/kubectl config view -o jsonpath="{.clusters[?(@.name=='kind-$KIND_CLUSTER')].cluster.server}" | cut -d':' -f3)
        echo "KIND_PORT: $KIND_PORT"
        ssh -4 -N -L $KIND_PORT:localhost:$KIND_PORT linkerd-docker &
        sleep 2 # Wait for ssh tunnel to come up.
        bin/kubectl version --short # Test connection to kind cluster.
        (
          . bin/_test-run.sh
          init_test_run $HOME/.linkerd
          ${{ matrix.integration_test }}_integration_tests
        )
